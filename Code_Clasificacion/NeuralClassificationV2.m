function [Y,Xf,Af] = NeuralClassificationV2(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Nov-2019 23:51:35.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0];
x1_step1.gain = [0.00784313725490196;0.00784313725490196;0.00784313725490196];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.3930391401654409478;-10.05436322132259086;1.3633074364358275243;-1.3235774742476695831;-0.70023522848670927132;2.5819874791102566114;0.89157763654837574041;-0.81524226883322314929;-0.97448045561542262494;-1.2663346589871771197;-1.7669968975513730136;-4.7063248036817597608;-1.0063133985806962389;0.49867590296446573372;0.26421661645907817961;1.4888646296762892973;-0.36861486733550880013;0.2262452706058832308;-11.203895965769511633;1.6844479456391470151];
IW1_1 = [0.62488751812780785055 -3.3600348245170610362 2.1949021915161797125;7.1917927314353926604 2.6976172688979378478 -2.2872917898925733127;-1.4380186928157849824 1.2938323647909739655 -1.6865621393460934474;1.4407751034994520367 -0.87353622320038815108 1.2071708521820732063;2.8461955817208126618 -3.093821822319175574 1.1902708951954685812;-6.3568663816466930427 0.47658166488376152437 2.3656488482751583113;0.27188171605295163857 -1.669385588249372887 -0.60687364743755300989;5.2977703199856174265 -12.960977968351057754 5.8644489348058916889;-0.029921771577180435175 1.7707100238356157096 0.44388390266347005353;1.4318683353583521178 -0.46164673101033931735 0.77522102833427208868;0.33994325315385853781 -2.2902066409245049883 1.6912235056681013123;22.337318184629260998 -39.664006685983636658 19.735510000533203367;4.2245275475030767964 -2.3551335014776131338 -0.15274506187788750022;-2.2209314432109437121 3.5663662705542944487 -1.9004594323857733063;2.5772984181286497929 1.0301854269249475227 -3.8615196402894151895;-11.543738565822629027 6.8870657037526710198 2.2907529357553624294;1.8725027679231718292 -4.1429245832997452226 2.5468108918531324747;2.9318628634981158676 1.3454940414853369113 -4.3793201629345084314;2.4473492411768908994 -3.963030500266167433 10.474627948461938232;0.46943509211379058632 2.0621725923783316148 -2.0872418578953726431];

% Layer 2
b2 = 0.91562042832986467733;
LW2_1 = [-1.4619184837931173959 3.4781013221833654292 -5.5913488579227710318 -13.59178908086919435 8.0253860442286004684 0.05937616043120502729 2.4589524340044013329 -0.064577367616938247119 2.0014183445922171245 7.9603681867916433745 3.581597104984997948 0.93827362527622160115 -1.5335191620428805237 12.419458123308293906 -3.2437339733516701301 -0.11179531760900153492 5.7864439396749407507 2.7574746635209139711 -2.2612498948009083222 2.2024032397943180683];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
