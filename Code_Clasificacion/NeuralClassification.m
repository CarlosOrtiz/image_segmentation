function [Y,Xf,Af] = NeuralClassification(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Nov-2019 17:25:14.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0];
x1_step1.gain = [0.00784313725490196;0.00784313725490196;0.00784313725490196];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.5755829770510727528;4.068263652865208968;1.1625293124776885367;2.0901308932580753286;1.6296523790634473983;1.9992383961209976295;2.0917245552799661468;-2.3437696167394714841;4.9681266222657276543;-2.1373207476346638423;4.7713192741986247825;-0.48339971045326041166;-1.8729207508570364649;2.47150645278205916;1.6128359210196332452;-1.7981861595581301039;2.0529732662813731103;2.5449623253842759141;3.8447699923031186664;-4.4845141267199259971];
IW1_1 = [-0.46677871456903385905 2.4036170351052881244 1.9554254275147187059;-0.75285129419549001728 2.572562738331155785 2.2847271562834845504;-5.4578053062398472761 3.9570814145834032338 -0.33401423108150657404;-0.68774102623568500459 -0.43462835130228499869 3.4887128597022836196;-2.7112111070282791658 2.6133351660537478267 0.94256284801234213599;-1.5643434894385808143 -0.94514977960724066985 3.2305819356142668752;-0.71162434504886362685 -0.45380869754886382639 3.4892024957026674947;-5.0548098461647521518 2.6124394764232614641 6.939623712308661041;-0.84732092869638997445 -4.0216887557012013232 -2.2639431704328583095;24.07810542838248935 -20.310977960695815625 0.60881238766624701242;-0.64872554242606705888 -3.7453229959639871005 -1.9832859561127627046;-2.9660448119771456454 -2.1432741860888491203 -0.94133052275491746475;17.566771559151106885 -13.955441250925609609 0.42536165962748528901;4.4382970020347602969 -2.6768557226292051254 -6.1036534443587466825;3.0798356191483344801 -2.0549546702115293328 -0.75519425812974583234;15.938362647482298584 -12.434054065075853757 0.91718387050895877621;0.22697204602893406022 0.51216411749229528994 3.378348128739464773;2.8075973497822981351 -1.6014548053118691229 -2.4362244268314685591;3.6110141945915290584 -4.355335657325394294 -3.972644322080110868;-7.583984931641387206 7.5187088450107122384 5.0187585399099852168];

% Layer 2
b2 = -0.12768870557104680663;
LW2_1 = [0.020659005806642868203 -0.018810052547283902941 0.013583737578142067448 -0.32339963410465588645 -0.0045538986309544404046 -0.0035015819078694373177 0.3223851869362683864 -1.854278424930718705 1.2250726343850415478 2.6808125678554941551 -1.9905768579348119829 0.00095203658499423986141 -4.2521191303805467854 -2.9663175581800755864 0.020274891952249747551 2.5804810206676633833 0.0049040129981993158675 -0.64139366009069620489 7.0792403193104123105 4.4534943753525109145];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
